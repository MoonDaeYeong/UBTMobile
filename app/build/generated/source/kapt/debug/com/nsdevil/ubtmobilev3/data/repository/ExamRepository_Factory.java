// Generated by Dagger (https://dagger.dev).
package com.nsdevil.ubtmobilev3.data.repository;

import com.nsdevil.ubtmobilev3.api.UbtService;
import com.nsdevil.ubtmobilev3.data.db.InAnswerDao;
import com.nsdevil.ubtmobilev3.data.db.InDataDao;
import com.nsdevil.ubtmobilev3.data.db.InExamInfoDao;
import com.nsdevil.ubtmobilev3.data.db.InQuestionDao;
import dagger.internal.Factory;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ExamRepository_Factory implements Factory<ExamRepository> {
  private final Provider<InExamInfoDao> examInfoDaoProvider;

  private final Provider<InQuestionDao> questionDaoProvider;

  private final Provider<InDataDao> dataDaoProvider;

  private final Provider<InAnswerDao> answerDaoProvider;

  private final Provider<UbtService> ubtServiceProvider;

  public ExamRepository_Factory(Provider<InExamInfoDao> examInfoDaoProvider,
      Provider<InQuestionDao> questionDaoProvider, Provider<InDataDao> dataDaoProvider,
      Provider<InAnswerDao> answerDaoProvider, Provider<UbtService> ubtServiceProvider) {
    this.examInfoDaoProvider = examInfoDaoProvider;
    this.questionDaoProvider = questionDaoProvider;
    this.dataDaoProvider = dataDaoProvider;
    this.answerDaoProvider = answerDaoProvider;
    this.ubtServiceProvider = ubtServiceProvider;
  }

  @Override
  public ExamRepository get() {
    return newInstance(examInfoDaoProvider.get(), questionDaoProvider.get(), dataDaoProvider.get(), answerDaoProvider.get(), ubtServiceProvider.get());
  }

  public static ExamRepository_Factory create(Provider<InExamInfoDao> examInfoDaoProvider,
      Provider<InQuestionDao> questionDaoProvider, Provider<InDataDao> dataDaoProvider,
      Provider<InAnswerDao> answerDaoProvider, Provider<UbtService> ubtServiceProvider) {
    return new ExamRepository_Factory(examInfoDaoProvider, questionDaoProvider, dataDaoProvider, answerDaoProvider, ubtServiceProvider);
  }

  public static ExamRepository newInstance(InExamInfoDao examInfoDao, InQuestionDao questionDao,
      InDataDao dataDao, InAnswerDao answerDao, UbtService ubtService) {
    return new ExamRepository(examInfoDao, questionDao, dataDao, answerDao, ubtService);
  }
}
